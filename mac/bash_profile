alias ..='cd ..'
alias ls='ls -G'
alias l='ls -lF'
alias la='ls -laF'
alias emacs='emacs -nw --no-init-file'
alias emacsclient='/Applications/Emacs.app/Contents/MacOS/bin/emacsclient'
alias ec="emacsclient -n -a /Applications/Emacs.app/Contents/MacOS/Emacs"
alias ecn="emacsclient -n -c -a /Applications/Emacs.app/Contents/MacOS/Emacs"

export EDITOR="ec"
export VISUAL="ec"

# BEGIN PROMPT
        RED="\[\033[0;31m\]"
     YELLOW="\[\033[0;33m\]"
      GREEN="\[\033[0;32m\]"
       BLUE="\[\033[0;34m\]"
  LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
      WHITE="\[\033[1;37m\]"
 LIGHT_GRAY="\[\033[0;37m\]"
 COLOR_NONE="\[\e[0m\]"

function parse_git_branch {

  git rev-parse --git-dir &> /dev/null
  git_status="$(git status 2> /dev/null)"
  branch_pattern="^# On branch ([^${IFS}]*)"
  remote_pattern="# Your branch is (.*) of"
  diverge_pattern="# Your branch and (.*) have diverged"
  if [[ ! ${git_status}} =~ "working directory clean" ]]; then
    state="${YELLOW}*"
  fi
  # add an else if or two here if you want to get more specific
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="${YELLOW}^"
    else
      remote="${YELLOW}v"
    fi
  fi
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="${YELLOW}^v"
  fi
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
    echo " (${branch})${remote}${state}"
  fi
}

function prompt_func() {
    previous_return_value=$?;
    prompt="\n\u@\h:${BLUE}\w${GREEN}$(parse_git_branch)\n${COLOR_NONE}"
    if test $previous_return_value -eq 0
    then
        PS1="${prompt}$ "
    else
        PS1="${prompt}${RED}\$${COLOR_NONE} "
    fi
}

PROMPT_COMMAND=prompt_func
# END PROMPT

# ~/bin
export PATH=~/bin:$PATH

# Java
export JAVA_HOME=$(/usr/libexec/java_home)

# TomCat
export CATALINA_HOME=~/opt/tomcat

# Maven
export M2_HOME=~/opt/maven
export PATH=$M2_HOME/bin:$PATH

# Groovy
export GROOVY_HOME=~/opt/groovy
export PATH=$GROOVY_HOME/bin:$PATH

# Scala
export SCALA_HOME=~/opt/scala
export PATH=$SCALA_HOME/bin:$PATH

# MongoDB
export MONGO_HOME=~/opt/mongo
export PATH=$MONGO_HOME/bin:$PATH

# Load RVM function
[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"

# Setting PATH for Python 2.7
# The orginal version is saved in .bash_profile.pysave
PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}"
export PATH
